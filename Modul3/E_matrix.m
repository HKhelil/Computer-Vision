function [E]=E_matrix(Korrespondenzen)

PtC1 = [Korrespondenzen(1:2,:);ones(1,size(Korrespondenzen,2))];
PtC2 = [Korrespondenzen(3:4,:);ones(1,size(Korrespondenzen,2))];
% Berechnung des Kroneckerprodukts zwischen PtC1 und PtC2
% Erstes Element kron(PtC1,ones(3,1)) erzeugt Matrix der Form :
% x11 x12 ...
% x11 x12 ...
% x11 x12 ...
% y11 y12 ...
% y11 y12 ...
% y11 y12 ...
% z11 z12 ...
% z11 z12 ...
% z11 z12 ...
% Zweites Element kron(ones(3,1),PtC2) erzeugt Matrix der Form :
% x11 x12 ...
% y11 y12 ...
% z11 z12 ...
% x11 x12 ...
% y11 y12 ...
% z11 z12 ...
% x11 x12 ...
% y11 y12 ...
% z11 z12 ...
%Elementweise multipliziert ergeben die Spalten die jeweiligen Kronecker-
%Produkte für alle x1 und x2. Für di Chi-Matrix muss das ganze noch
%transponiert werden
Xi = (kron(PtC1,ones(3,1)).*kron(ones(3,1),PtC2))';

%Singulärwertzerlegung der Matrix Chi bzw Xi um E_s zu berechnen
% (Singulärwerte werden automatisch der Größe nach sortiert)
[U,S,V] = svd(Xi);

% Essentielle Matrix, E
E = reshape(V(:,end),3,3);
% Anpassen der Singulärwerte für Essentielle Matrix E
[U, S, V] = svd(E);
%Hier checken ob -E oder +E. Da U und V Rotationen sein müssen und E=USV
%-E=-USV beides gültige Lösungen sind, wähle die Lösung, bei der det(U)=+1
%ist, bzw. setze U so, dass det(U)=+1
if det(U) < 0
    U = U* [1 0 0;0 1 0;0 0 -1];
end

if det(V) < 0
    V = V* [1 0 0;0 1 0;0 0 -1];
end
E = U * diag([1,1,0]) * V'
